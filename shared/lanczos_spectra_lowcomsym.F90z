#include "../shared/mycomplex.h"
! Compute the spectra function of Hermitian matrix using
! lanczos algorithm
! what we calculate is
!
!  <vec| 1/(z-H) |vec>
!
subroutine Zlanczos_spectra_isdf_lowcomsym(v0, v0_norm, ncv_loc, zz, nz, niter, isdf_in, sqrtR, polynomial, npoly, &
                                           spectra, tamm_d, blksz, nmrep, gvec &
#ifdef DCU
                                           , d_PsiV, d_PsiC, d_Cmtrx, d_pvec, d_cvec, d_lcrep, &
                                           hipblasHandle &
#elif defined _CUDA
                                           , d_PsiV, d_PsiC, d_Cmtrx, d_pvec, d_cvec, d_lcrep, &
                                           vstep, tmp_vec, streamid &
#endif
                                           )

  use typedefs
  use mpi_module

#ifdef DCU
  use hipfort_types
#elif defined _CUDA
  use cublas  ! required to use generic BLAS interface
  use cudafor ! CUDA runtime API routines (e.g. cudaDeviceSynchronize)
#endif

  implicit none
  include 'mpif.h'

  type(ISDF), intent(in) :: isdf_in
  type(gspace), intent(in) :: gvec
  logical, intent(in) :: tamm_d
  integer, intent(in) :: ncv_loc, niter, nz, npoly, blksz, nmrep
  real(dp), intent(in) :: polynomial(npoly + 1), v0_norm(blksz), sqrtR(ncv_loc)
  SCALAR, intent(in) :: v0(ncv_loc, blksz)
  complex(dpc), intent(in) :: zz(nz, blksz)
  complex(dpc), intent(out):: spectra(nz, blksz)
  !real(dp), target, intent(inout) :: MC_vec(w_grp%myn_intp_r, blksz), &
  !  CMC_vec(ncv_loc, blksz), tmp_vec(isdf_in%n_intp_r, blksz)

#ifdef DCU
  type(c_ptr), intent(inout) :: d_PsiV, d_PsiC, d_Cmtrx, d_cvec, d_pvec, d_lcrep
  type(c_ptr), intent(in) :: hipblasHandle
#elif defined _CUDA
  real(dp), device, intent(in) :: d_PsiV(isdf_in%n_intp_r, *), d_PsiC(isdf_in%n_intp_r, *)
  real(dp), device, intent(inout) :: d_Cmtrx(isdf_in%maxmync_sym*vstep, isdf_in%n_intp_r), &
                                     d_cvec(isdf_in%n_intp_r, blksz), &
                                     d_pvec(isdf_in%maxmync_sym*vstep, blksz)
  real(dp), intent(inout) :: tmp_vec(isdf_in%n_intp_r, blksz)
  integer, device, intent(in) :: d_lcrep(*)
  integer, intent(in) :: vstep
  integer(kind=cuda_stream_kind), intent(in) :: streamid
#endif

  SCALAR :: a_elmt(niter, blksz), a_tmp(blksz)
  real(dp) :: b_elmt(niter, blksz), b_tmp(blksz)
  complex(dpc) :: numerator, denominator
  integer :: ii, i, j, k, iz, info

#ifndef _CUDA
  SCALAR, external :: Zdot_c
#endif

  SCALAR :: vec(ncv_loc, blksz), wvec(ncv_loc, blksz), tmpvec(ncv_loc, blksz)

  ! normalize the vector
  do ii = 1, blksz
    vec(1:ncv_loc, ii) = v0(1:ncv_loc, ii)/v0_norm(ii)
  end do

  b_elmt(1, :) = one

  ! compute wvec = H*vec
  ! if (peinf%master) print *, "vec = ", vec(1:5,1), "...", vec(ncv_loc-4:ncv_loc,1)
  if (tamm_d) then ! TDA - poly fitting
    call Zmatvec_isdf_lowcomsym(vec, wvec, ncv_loc, isdf_in, sqrtR, .true., &
                                blksz, nmrep, gvec &
#ifdef DCU
                                , d_PsiV, d_PsiC, d_Cmtrx, d_pvec, d_cvec, d_lcrep, &
                                hipblasHandle &
#elif defined _CUDA
                                , d_PsiV, d_PsiC, d_Cmtrx, d_pvec, d_cvec, d_lcrep, &
                                vstep, tmp_vec, streamid &
#endif
                                )
  else
    call Zpolynomial_matvec_isdf_lowcomsym(vec, wvec, ncv_loc, polynomial, npoly, isdf_in, sqrtR, &
                                           blksz, nmrep, gvec &
#ifdef DCU
                                           , d_PsiV, d_PsiC, d_Cmtrx, d_pvec, d_cvec, d_lcrep, &
                                           hipblasHandle &
#elif defined _CUDA
                                           , d_PsiV, d_PsiC, d_Cmtrx, d_pvec, d_cvec, d_lcrep, &
                                           vstep, tmp_vec, streamid &
#endif
                                           )
  end if
  ! if (peinf%master) print *, "wvec = ",wvec(1:10, 2), "...", vec(ncv_loc-4:ncv_loc,2)
  !
  !call stopwatch(peinf%master,'mpi_allreduce 0 start')
  ! a(1) = w* @ v
  do ii = 1, blksz
    a_tmp(ii) = Zdot_c(ncv_loc, wvec(1, ii), 1, vec(1, ii), 1)
  end do

  call MPI_ALLREDUCE(MPI_IN_PLACE, a_tmp, blksz, MPI_DOUBLE_SCALAR, MPI_SUM, peinf%comm, info)
  a_elmt(1, :) = a_tmp

  ! wvec = wvec - a_elmt(1) * vec
  do ii = 1, blksz
    call Zaxpy(ncv_loc, -a_elmt(1, ii), vec(1, ii), 1, wvec(1, ii), 1)
    b_tmp(ii) = real(Zdot_c(ncv_loc, wvec(1, ii), 1, wvec(1, ii), 1), kind=dp)
  end do
  call MPI_ALLREDUCE(MPI_IN_PLACE, b_tmp, blksz, MPI_DOUBLE_PRECISION, MPI_SUM, peinf%comm, info)
  b_elmt(2, :) = sqrt(b_tmp)
  ! call stopwatch(peinf%master,'mpi_allreduce 0 finish')

  do k = 2, niter
    do ii = 1, blksz
      wvec(1:ncv_loc, ii) = wvec(1:ncv_loc, ii)/b_elmt(k, ii)
      vec(1:ncv_loc, ii) = -vec(1:ncv_loc, ii)*b_elmt(k, ii)
    end do ! ii loop
    ! swap wvec and vec
    tmpvec = vec
    vec = wvec
    wvec = tmpvec
    ! wvec = wvec + H*vec
    if (tamm_d) then ! TDA - poly fitting
      call Zmatvec_isdf_lowcomsym(vec, tmpvec, ncv_loc, isdf_in, sqrtR, .true., &
                                 blksz, nmrep, gvec &
#ifdef DCU
                                 , d_PsiV, d_PsiC, d_Cmtrx, d_pvec, d_cvec, d_lcrep, &
                                 hipblasHandle &
#elif defined _CUDA
                                 , d_PsiV, d_PsiC, d_Cmtrx, d_pvec, d_cvec, d_lcrep, &
                                 vstep, tmp_vec, streamid &
#endif
                                 )
    else ! not TDA
      call Zpolynomial_matvec_isdf_lowcomsym(vec, tmpvec, ncv_loc, polynomial, npoly, isdf_in, sqrtR, &
                                            blksz, nmrep, gvec &
#ifdef DCU
                                            , d_PsiV, d_PsiC, d_Cmtrx, d_pvec, d_cvec, d_lcrep, &
                                            hipblasHandle &
#elif defined _CUDA
                                            , d_PsiV, d_PsiC, d_Cmtrx, d_pvec, d_cvec, d_lcrep, &
                                            vstep, tmp_vec, streamid &
#endif
                                            )
    end if
    wvec = wvec + tmpvec
    !call stopwatch(peinf%master,'mpi_allreduce k start')
    do ii = 1, blksz
      a_tmp(ii) = Zdot_c(ncv_loc, wvec(1, ii), 1, vec(1, ii), 1)
    end do
    call MPI_ALLREDUCE(MPI_IN_PLACE, a_tmp, blksz, MPI_DOUBLE_SCALAR, MPI_SUM, peinf%comm, info)
    a_elmt(k, :) = a_tmp
    if (k < niter) then
      do ii = 1, blksz
        call Zaxpy(ncv_loc, -a_elmt(k, ii), vec(1, ii), 1, wvec(1, ii), 1)
        b_tmp(ii) = real(Zdot_c(ncv_loc, wvec(1, ii), 1, wvec(1, ii), 1), kind=dp)
      end do  ! ii
      call MPI_ALLREDUCE(MPI_IN_PLACE, b_tmp, blksz, MPI_DOUBLE_PRECISION, MPI_SUM, peinf%comm, info)
      b_elmt(k + 1, :) = sqrt(b_tmp)
    end if
    !call stopwatch(peinf%master,'mpi_allreduce k finish')
  end do  ! k

  spectra = zzero

  do ii = 1, blksz
    do iz = 1, nz
      do j = niter, 1, -1
        numerator = b_elmt(j, ii) * b_elmt(j, ii) * zone
        if (j == 1) numerator = zone
        denominator = zz(iz, ii) - a_elmt(j, ii) - spectra(iz, ii)
        spectra(iz, ii) = numerator/denominator
        !if (nz .eq. 1) print *, "check ", j, numerator, denominator
      end do ! j
      !print *, "spectra ", iz, zz(iz), spectra(iz)
    end do ! iz
  end do ! ii

end subroutine

