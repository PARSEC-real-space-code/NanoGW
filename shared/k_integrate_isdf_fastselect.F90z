#include "../shared/mycomplex.h"
!===================================================================
!
! Calculates the kernel in parallel and stores in structures k_tmp.
! Several k_tmp structures are calculated, as many as necessary to
! cover the kernel in k_mat.
!
! Copyright (C) 2009 Murilo L. Tiago, http://users.ices.utexas.edu/~mtiago
! This file is part of RGWBS. It is distributed under the GPL v1.
!
!-------------------------------------------------------------------
subroutine Zk_integrate_isdf_fastselect(gvec, kpt, k_mat, k_tmp, irp, kflag, nspin, nbuff_max, &
                                        qkt_in, isdf_in)

  use typedefs
  use mpi_module
  use fft_module
  use xc_functionals
  implicit none
#ifdef MPI
  include 'mpif.h'
#endif

  ! arguments
  ! real-space grid
  type(gspace), intent(inout) :: gvec
  ! k-points and electron wavefunctions
  type(kptinfo), intent(in) :: kpt
  ! kernel
  type(kernelinfo), intent(in) :: k_mat
  ! temporary space where integrals are stored
  type(kernel_scratch), intent(inout) :: k_tmp(nbuff_max)
  type(ISDF), intent(in) :: isdf_in
  ! current representation, kernel flag (see parent routine),
  ! number of spin channels, buffer size
  integer, intent(in) :: irp, kflag, nspin, nbuff_max
  ! current q-vector
  real(dp), intent(in) :: qkt_in(3)
  ! local variables
  real(dp) :: tmpMmtrx(isdf_in%n_intp_r, isdf_in%n_intp_r)
  real(dp) :: tmpCmtrx(isdf_in%n_intp_r)
  type(xc_type) :: xc_lda
  real(dp), parameter :: tol_l = 1.d-8
  character(len=800) :: lastwords
  logical :: sympair, lphase, verbose
#ifndef CPLX
  logical :: outflag
  logical, dimension(:), allocatable :: col_check, row_check
#endif
  integer :: ii, jj, nn, m1, m2, m3, m4, k1, k2, k3, k4, iblock, &
             isp, i_row, i_col, ipe, jcount, dicount, ipe_count, &
             icc, ngrid, ngrid_pe, info, mycount, ncount, ncache, rsp, csp, &
             startrow(2), endrow(2), startcol(2), endcol(2), tmp_ncol, &
             jstart, jstop, errinfo
  real(dp) :: tsec(2)

  integer, dimension(:, :), allocatable :: ipe_quadr
  ! external functions (BLAS)
  SCALAR, external :: Zdot_c

  ! WG debug
  integer :: outdbg, icv1, icv2
  real(dp) :: alpha, beta, tmpvec(isdf_in%n_intp_r)

  outdbg = peinf%inode + 198812

  ngrid_pe = w_grp%ldn*w_grp%npes
  ngrid = w_grp%mydim
  verbose = .true.
  if (verbose) then
    write (outdbg, *) " ngrid_pe = w_grp%ldn * w_grp%npes = ", ngrid_pe
    write (outdbg, *) " w_grp%npes = ", w_grp%npes
    write (outdbg, *) " ngrid = w_grp%mydim = ", w_grp%mydim
    write (outdbg, *) " w_grp%ldn = ", w_grp%ldn
    write (outdbg, *) " k_mat%lcache = ", k_mat%lcache
  end if

  !-------------------------------------------------------------------
  ! Allocate data.
  !
  ncache = ngrid/k_mat%lcache
  if (ncache*k_mat%lcache < ngrid) ncache = ncache + 1
  if (verbose) then
    write (outdbg, *) " ncache = ngrid / k_mat%lcache = ", ncache
  end if

  iblock = 1
  k_tmp(iblock)%nblock = 0
  allocate (k_tmp(iblock)%quadr(10, k_tmp(iblock)%nblock_max))
  k_tmp(iblock)%quadr = 0
  allocate (k_tmp(iblock)%Zm_f(k_tmp(iblock)%nblock_max))
  k_tmp(iblock)%Zm_f = Zzero
  allocate (ipe_quadr(10, k_mat%ncol))
  ipe_quadr = 0

  ! WG debug
#ifdef DEBUG
  if (peinf%master) then
    write (6, *) "dbg ngrid = ", ngrid
    write (6, *) "dbg k_mat%lcache = ", k_mat%lcache
    write (6, *) "dbg ncache = ", ncache
    write (6, *) "dbg w_grp%ldn = ", w_grp%ldn
  end if
#endif

  !-------------------------------------------------------------------
  ! Start calculating rows of kernel matrix elements from the end:
  ! first PE receives last row, second PE receives the previous
  ! one, until all rows are calculated.
  ! This procedure helps load balance: longer rows are likely to
  ! be done before shorter ones, and each PE receives an equal
  ! amount of long and short rows.
  !
  startrow(1) = 1
  endrow(1) = k_mat%nrow_up
  startrow(2) = k_mat%nrow_up + 1
  endrow(2) = k_mat%nrow
  startcol(1) = 1
  endcol(1) = k_mat%ncol_up
  startcol(2) = k_mat%ncol_up + 1
  endcol(2) = k_mat%ncol
  if (verbose) then
    write (outdbg, '(a,I6)') " startrow(1) = ", startrow(1)
    write (outdbg, '(a,I6)') " endrow(1) = ", endrow(1)
    write (outdbg, '(a,I6)') " startcol(1) = ", startcol(1)
    write (outdbg, '(a,I6)') " endcol(1) = ", endcol(1)
    write (outdbg, '(a,I6)') " startrow(2) = ", startrow(2)
    write (outdbg, '(a,I6)') " endrow(2) = ", endrow(2)
    write (outdbg, '(a,I6)') " startcol(2) = ", startcol(2)
    write (outdbg, '(a,I6)') " endcol(2) = ", endcol(2)
    write (outdbg, '(2(a,I6))') " peinf%inode = ", peinf%inode, ", w_grp%mygr = ", w_grp%mygr
  end if
  !
  ! Go over the blocks of spin matrices.
  ncount = 0
  jcount = 0
  do rsp = 1, nspin
    do csp = 1, nspin
#ifndef CPLX
      tmp_ncol = endcol(csp) - startcol(csp) + 1
      allocate (col_check(tmp_ncol))
      allocate (row_check(tmp_ncol))
      col_check = .false.
      row_check = .false.
      do i_col = startcol(csp), endcol(csp), r_grp%npes
        ii = w_grp%mygr*w_grp%npes + i_col + w_grp%inode
        if (ii > endcol(csp)) exit
        m3 = k_mat%col(1, ii)
        m4 = k_mat%col(2, ii)
        if (csp == 1) then
          jstart = 1
          jstop = k_mat%ncol_up
        else
          jstart = k_mat%ncol_up + 1
          jstop = k_mat%ncol
        end if
        do jj = jstart, jstop
          if (m3 == k_mat%col(2, jj) .and. &
              m4 == k_mat%col(1, jj)) then
            col_check(ii - startcol(csp) + 1) = .true.
            exit
          end if
        end do
        if (csp == 1) then
          jstart = 1
          jstop = k_mat%nrow_up
        else
          jstart = k_mat%nrow_up + 1
          jstop = k_mat%nrow
        end if
        do jj = jstart, jstop
          if (m4 == k_mat%row(2, jj) .and. &
              m3 == k_mat%row(1, jj)) then
            row_check(ii - startcol(csp) + 1) = .true.
            exit
          end if
        end do
      end do ! i_col loop
#ifdef MPI
      call MPI_ALLREDUCE(MPI_IN_PLACE, col_check(1), tmp_ncol, MPI_LOGICAL, &
                         MPI_LOR, r_grp%comm, errinfo)
      call MPI_ALLREDUCE(MPI_IN_PLACE, row_check(1), tmp_ncol, MPI_LOGICAL, &
                         MPI_LOR, r_grp%comm, errinfo)
#endif
#endif
      if (verbose) write (outdbg, '(A, I6, A, I6)') ' - loop rsp =', rsp, ' csp =', csp
#ifdef DEBUG
      if (r_grp%master) then
        write (6, *) "working on rsp ", rsp, " csp ", csp, " nrow per proc", (endrow(rsp) - startrow(rsp))/r_grp%npes
      end if
#endif
      do i_row = startrow(rsp), endrow(rsp), r_grp%npes
        if (verbose) write (outdbg, '(a,I6)') " -- loop i_row = ", i_row
#ifdef DEBUG
        if (r_grp%master) then
          write (6, *) "working on row ", i_row/r_grp%npes + 1
        end if
#endif
        ! Determine which pairs (m3,m4) will be included.
        ! Indices for the important pairs will be stored in
        ! quadr(:,jcount+1:jcount+mycount).
        mycount = 0
        ii = w_grp%mygr*w_grp%npes + i_row + w_grp%inode
        if (ii <= endrow(rsp)) then
          call timacc(66, 1, tsec)
          m1 = k_mat%row(1, ii)
          m2 = k_mat%row(2, ii)
          k1 = k_mat%row(3, ii)
          k2 = k_mat%row(4, ii)
          sympair = .false.

          if (rsp == csp) then
            do jj = startcol(rsp), endcol(rsp)
              if (k_mat%col(1, jj) == m1 .and. k_mat%col(2, jj) == m2 &
                  .and. k_mat%col(3, jj) == k1 .and. k_mat%col(4, jj) == k2) then
                sympair = .true.
                exit
              end if
            end do
          end if
          call timacc(66, 2, tsec)
          call timacc(65, 1, tsec)
          do jj = startcol(csp), endcol(csp) ! jj col_LOOP
            m3 = k_mat%col(1, jj)
            m4 = k_mat%col(2, jj)
            k3 = k_mat%col(3, jj)
            k4 = k_mat%col(4, jj)
            !
            ! Apply symmetrizations to quadruplet (m1,m2,m3,m4)
            ! and skip this matrix element if a similar one is calculated.
            !
#ifndef CPLX
            !call select1234(k_mat,gvec%syms,m1,m2,m3,m4,csp, &
            !     kpt%wfn(rsp,k1)%jrep(0,m1), &
            !     kpt%wfn(rsp,k2)%jrep(0,m2), &
            !     kpt%wfn(csp,k3)%jrep(0,m3), &
            !     kpt%wfn(csp,k4)%jrep(0,m4), &
            !     sympair,outflag)
            outflag = .true.
            if ((m4 < m3) .and. col_check(jj - startcol(csp) + 1)) outflag = .false.
            if (row_check(jj - startcol(csp) + 1) .and. sympair) then
              if (m1 > m3) then
                outflag = .false.
              end if
              if (m3 == m1 .and. m4 < m2) then
                outflag = .false.
              end if
            end if
            if (.not. outflag) cycle
#endif

            mycount = mycount + 1
            if (jcount + mycount > k_tmp(iblock)%nblock_max) then
              write (lastwords, *) 'ERROR: buffer size too small! ', &
                jcount + mycount, k_tmp(iblock)%nblock_max, iblock
              call die(lastwords)
            end if

            !k_tmp(iblock)%quadr(1,jcount+mycount) = m1
            !k_tmp(iblock)%quadr(2,jcount+mycount) = m2
            !k_tmp(iblock)%quadr(3,jcount+mycount) = m3
            !k_tmp(iblock)%quadr(4,jcount+mycount) = m4
            !k_tmp(iblock)%quadr(5,jcount+mycount) = k1
            !k_tmp(iblock)%quadr(6,jcount+mycount) = k2
            !k_tmp(iblock)%quadr(7,jcount+mycount) = k3
            !k_tmp(iblock)%quadr(8,jcount+mycount) = k4
            !k_tmp(iblock)%quadr(9,jcount+mycount) = rsp
            !k_tmp(iblock)%quadr(10,jcount+mycount) = csp
            k_tmp(iblock)%quadr(1:10, jcount + mycount) = &
              (/m1, m2, m3, m4, k1, k2, k3, k4, rsp, csp/)
            if (verbose) write (outdbg, '(A, I6, A, 4I6)') " --- mycount: ", mycount, ", calculate", m1, m2, m3, m4
          end do ! do jj = startcol, endcol (END jj col_LOOP)
          call timacc(65, 2, tsec)
        end if ! if ii <= endrow(rsp)
        ipe_count = mycount
        ipe_quadr(1:10, 1:mycount) = &
          k_tmp(iblock)%quadr(1:10, jcount + 1:jcount + mycount)
        ! Calculate kernel matrix elements involving pair (m3,m4).
        if (verbose) write (outdbg, '(A)') " -- start to calculate matrix elements involving pair m3,m4 --- "
        call timacc(13, 1, tsec)

        do dicount = 1, ipe_count
          m1 = ipe_quadr(1, dicount)
          m2 = ipe_quadr(2, dicount)
          m3 = ipe_quadr(3, dicount)
          m4 = ipe_quadr(4, dicount)
          k1 = ipe_quadr(5, dicount)
          k2 = ipe_quadr(6, dicount)
          k3 = ipe_quadr(7, dicount)
          k4 = ipe_quadr(8, dicount)
          if (verbose) write (outdbg, '(A,I5,A,4I5)') " ----- dicount", dicount, ", m1 m2 m3 m4", m1, m2, m3, m4
          !
          ! m1, m2, m3, m4 are the real band index in parsec.dat
          ! pairmap maps the val and cond index to pair index in Cmtrx
          ! assume m1 < m2 and m3 < m4
          !
          !if(m1 > m2 .or. m3 > m4) then
          !   write(*,*) 'm1 > m2 or m3 > m4'
          !   write(*,*) 'm1 m2 m3 m4 :', m1, m2, m3, m4
          !   stop
          !endif
          if (dicount == 1) then ! icv1 is the same for each i_row, only need to set it at the beginning
            icv1 = 0
            if (m1 > m2) then
              if (m2 <= isdf_in%maxivv) icv1 = isdf_in%pairmap(m2, m1, rsp, k1, irp) ! assume k1 == k2, this is valid for confined systems
            else
              if (m1 <= isdf_in%maxivv) icv1 = isdf_in%pairmap(m1, m2, rsp, k1, irp) ! assume k1 == k2, this is valid for confined systems
            end if
          end if
          icv2 = 0
          if (m3 > m4) then
            if (m4 <= isdf_in%maxivv) icv2 = isdf_in%pairmap(m4, m3, csp, k3, irp) ! assume k3 == k4
          else
            if (m3 <= isdf_in%maxivv) icv2 = isdf_in%pairmap(m3, m4, csp, k3, irp)
          end if
          !
          ! Mmtrx dimension: Mmtrx(n_intp_r, n_intp_r, nspin, nspin, 2)
          ! Mmtrx(:,:,:,:,:, 1): <zeta(i,isp)| V_coul | zeta(j,jsp)>
          ! Mmtrx(:,:,:,:,:, 2): <zeta(i,isp)| f_lda | zeta(j,isp)>
          ! Cmtrx dimension: Cmtrx(n_intp_r, maxncv, nspin)
          ! calculate: tmpvec(1:n_intp_r) = Mmtrx(1:n_intp_r, 1:n_intp_r) * Cmtrx(1:n_intp_r, icv1)
          !
          if (verbose) then
            write (outdbg, '(A,i5,A,i5,A,i5,A,i5)') &
              "rsp =", rsp, " csp =", &
              csp, " icv1 = ", icv1, " icv2 = ", icv2
          end if
          ! old code here ---
          if (.false.) then
            !
            tmpMmtrx(1:isdf_in%n_intp_r, 1:isdf_in%n_intp_r) = 0.0
            if (kflag < 2) then
              tmpMmtrx(1:isdf_in%n_intp_r, 1:isdf_in%n_intp_r) &
                = isdf_in%Mmtrx(1:isdf_in%n_intp_r, 1:isdf_in%n_intp_r, csp, rsp, k1, 1, irp)
            end if
            if (kflag > 0) then
              tmpMmtrx(1:isdf_in%n_intp_r, 1:isdf_in%n_intp_r) &
                = tmpMmtrx(1:isdf_in%n_intp_r, 1:isdf_in%n_intp_r) + &
                  isdf_in%Mmtrx(1:isdf_in%n_intp_r, 1:isdf_in%n_intp_r, csp, rsp, k1, 2, irp)
            end if
            ! currently only support confined systems, so there is only one k-point
            call dgemv('n', isdf_in%n_intp_r, isdf_in%n_intp_r, one, tmpMmtrx(1, 1), isdf_in%n_intp_r, &
                       isdf_in%Cmtrx(1, icv1, rsp, k1, irp), 1, zero, tmpvec, 1)
            !
          end if
          ! new code here ---
          if (dicount == 1) then
            ! --- m1, m2, k1, k2 will be the same for a specific i_row ---
            ! --- so we only need to calculate it once for each i_row index
            tmpvec = 0.0
            if (isdf_in%lessmemory == 1) then
              ii = kpt%wfn(rsp, k1)%map(m1)
              jj = kpt%wfn(rsp, k1)%map(m2)
              tmpCmtrx(1:isdf_in%n_intp_r) = &
                isdf_in%Psi_intp(1:isdf_in%n_intp_r, ii, rsp, k1)* &
                isdf_in%Psi_intp(1:isdf_in%n_intp_r, jj, rsp, k1)
              if (kflag < 2) then
                call dgemv('n', isdf_in%n_intp_r, isdf_in%n_intp_r, one, isdf_in%Mmtrx(1, 1, csp, rsp, k1, 1, irp), &
                           isdf_in%n_intp_r, tmpCmtrx(1), 1, zero, tmpvec, 1)
              end if
              if (kflag > 0) then
                call dgemv('n', isdf_in%n_intp_r, isdf_in%n_intp_r, one, isdf_in%Mmtrx(1, 1, csp, rsp, k1, 2, irp), &
                           isdf_in%n_intp_r, tmpCmtrx(1), 1, one, tmpvec, 1)
              end if ! kflag
            else
              if (kflag < 2) then
                call dgemv('n', isdf_in%n_intp_r, isdf_in%n_intp_r, one, isdf_in%Mmtrx(1, 1, csp, rsp, k1, 1, irp), &
                           isdf_in%n_intp_r, isdf_in%Cmtrx(1, icv1, rsp, k1, irp), 1, zero, tmpvec, 1)
              end if
              if (kflag > 0) then
                call dgemv('n', isdf_in%n_intp_r, isdf_in%n_intp_r, one, isdf_in%Mmtrx(1, 1, csp, rsp, k1, 2, irp), &
                           isdf_in%n_intp_r, isdf_in%Cmtrx(1, icv1, rsp, k1, irp), 1, one, tmpvec, 1)
              end if ! kflag
            end if ! isdf_in%lessmemory
          end if ! dicount
          !
          !my_matrix(dicount) = my_matrix(dicount) + &
          !     Zdot_c(nelem,fwfn123,1,kpt%wfn(csp,k4)%Zwf(istart,jj),1) * fac
          ! calculate: Zm_f = tmpvec(1:n_intp_r) * Cmtrx(1:n_intp_r, icv2)
          !
          if (isdf_in%lessmemory == 1) then
            ii = kpt%wfn(csp, k3)%map(m3)
            jj = kpt%wfn(csp, k3)%map(m4)
            tmpCmtrx(1:isdf_in%n_intp_r) = &
              isdf_in%Psi_intp(1:isdf_in%n_intp_r, ii, csp, k3)* &
              isdf_in%Psi_intp(1:isdf_in%n_intp_r, jj, csp, k3)
            k_tmp(iblock)%Zm_f(jcount + dicount) = &
              Zdot_c(isdf_in%n_intp_r, tmpvec, 1, tmpCmtrx(1), 1)
          else
            k_tmp(iblock)%Zm_f(jcount + dicount) = &
              Zdot_c(isdf_in%n_intp_r, tmpvec, 1, isdf_in%Cmtrx(1, icv2, csp, k3, irp), 1)
          end if
          !
        end do ! do dicount loop

        if (.true.) then
          do dicount = 1, ipe_count
            m1 = ipe_quadr(1, dicount)
            m2 = ipe_quadr(2, dicount)
            m3 = ipe_quadr(3, dicount)
            m4 = ipe_quadr(4, dicount)
            if (verbose) write (outdbg, '( i5,"  <",2i4,"|F|",2i4,">",e16.5)') dicount, m3, m4, m1, m2, k_tmp(iblock)%Zm_f(jcount + dicount)
          end do
        end if

        if (verbose) write (outdbg, '(A)') " -- finished calculating matrix elements involving pair m3,m4 --- "
        call timacc(13, 2, tsec)
        jcount = jcount + mycount
        if (verbose) write (outdbg, '(A,I6)') " -- jcount = ", jcount
#ifdef DEBUG
        if (r_grp%master) then
          write (6, *) "finished on row ", i_row/r_grp%npes + 1, &
            " total row per proc ", (endrow(rsp) - startrow(rsp))/r_grp%npes
        end if
#endif
        !
        !   Are we close to filling up buffer arrays? If so, print out
        !   calculated matrix elements.
        !
        !   jcount is a counter for the number of computed matrix elements before
        !   last output on disk by the current PE
        !   ncount is a cumulative counter of computed matrix elements
        !
        if (jcount + k_mat%ncol >= k_tmp(iblock)%nblock_max) then
          k_tmp(iblock)%nblock = jcount
          ncount = ncount + jcount
          jcount = 0
          if (r_grp%master) then
            call stopwatch(r_grp%master, ' Kernel matrix calculation ')
#ifdef DEBUG
            write (6, '(i10,a,i3,a,i2,a,2i2)') ncount, &
              ' matrix elements calculated by PE', &
              peinf%inode, ' representation ', irp, ' spin ', rsp, csp
#endif
            call flush (6)
          end if

          iblock = iblock + 1
          if (iblock > nbuff_max) then
            write (lastwords, *) 'ERROR: too few buffer structures ! ', &
              iblock, nbuff_max
            call die(lastwords)
          end if
          k_tmp(iblock)%nblock = 0
          allocate (k_tmp(iblock)%quadr(10, k_tmp(iblock)%nblock_max), stat=info)
          write (lastwords, '(a,i5.5)') 'k_tmp%quadr_', iblock
          call alccheck(trim(lastwords), 'k_integrate', &
                        10*k_tmp(iblock)%nblock_max, info)
          k_tmp(iblock)%quadr = 0
          allocate (k_tmp(iblock)%Zm_f(k_tmp(iblock)%nblock_max), stat=info)
          write (lastwords, '(a,i5.5)') 'k_tmp%m_f_', iblock
          call alccheck(trim(lastwords), 'k_integrate', &
                        k_tmp(iblock)%nblock_max, info)
          k_tmp(iblock)%Zm_f = Zzero
        end if
      end do ! do i_row = startrow(rsp), endrow(rsp), r_grp%npes
      call timacc(67, 1, tsec)
#ifndef CPLX
      deallocate (row_check, col_check)
#endif
      !
      !  Finished!
      !  Write last computed matrix elements to disk.
      !
      k_tmp(iblock)%nblock = jcount
      ncount = ncount + jcount
      jcount = 0

      iblock = iblock + 1
      if (iblock > nbuff_max) then
        write (lastwords, *) 'ERROR: too few buffer structures ! ', &
          iblock, nbuff_max
        call die(lastwords)
      end if
      k_tmp(iblock)%nblock = 0
      allocate (k_tmp(iblock)%quadr(10, k_tmp(iblock)%nblock_max), stat=info)
      write (lastwords, '(a,i5.5)') 'k_tmp%quadr_', iblock
      call alccheck(trim(lastwords), 'k_integrate', &
                    10*k_tmp(iblock)%nblock_max, info)
      k_tmp(iblock)%quadr = 0
      allocate (k_tmp(iblock)%Zm_f(k_tmp(iblock)%nblock_max), stat=info)
      write (lastwords, '(a,i5.5)') 'k_tmp%m_f', iblock
      call alccheck(trim(lastwords), 'k_integrate', &
                    k_tmp(iblock)%nblock_max, info)
      k_tmp(iblock)%Zm_f = Zzero
      call timacc(67, 2, tsec)
    end do ! do csp
  end do ! do rsp
  !-------------------------------------------------------------------
  ! Deallocate data, do printout, etc.
  !
  if (r_grp%master) then
    write (6, '(a,i10,a,a,i3,a,i2)') 'Kernel done! ', ncount, ' matrix ', &
      'elements calculated by PE', peinf%inode, ' representation ', irp
    write (6, *) 'Buffer sizes: ', iblock
    write (6, *) (k_tmp(nn)%nblock, nn=1, iblock)
    write (6, *)
    write (6, *) (k_tmp(nn)%nblock_max, nn=1, iblock)
    write (6, *)
    call flush (6)
  end if
  if (verbose) then
    write (outdbg, '(a,i10)') 'peinf%inode', peinf%inode
    write (outdbg, '(a,i10,a,a,i3,a,i2)') 'Kernel done! ', ncount, ' matrix ', &
      'elements calculated by PE', peinf%inode, ' representation ', irp
    write (outdbg, *) 'Buffer sizes: ', iblock
    write (outdbg, *) (k_tmp(nn)%nblock, nn=1, iblock)
    write (outdbg, *)
    write (outdbg, *) (k_tmp(nn)%nblock_max, nn=1, iblock)
    write (outdbg, *)
  end if

  deallocate (ipe_quadr)

end subroutine Zk_integrate_isdf_fastselect
!===================================================================
