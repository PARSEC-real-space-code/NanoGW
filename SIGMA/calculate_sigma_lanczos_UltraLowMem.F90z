#include "../shared/mycomplex.h"
!===================================================================
!
! Calculate G0W0 self-energy using lanczos iterations
!
! Author: Weiwei Gao @ Dalian Univ. of Tech.
!
!---------------------------------------------------------------
subroutine Zcalculate_sigma_lanczos_UltraLowMem(nspin, nkpt, &
                                                sig_en, dft_code, gvec, kpt, qpt, k_c, k_p, sig_in, &
                                                sig, q_p, nolda, tamm_d, writeqp, snorm, cohsex, lstop, &
                                                ecuts, sig_cut, max_sig, &
                                                isdf_in, doisdf, opt)

  use typedefs
  use mpi_module
  implicit none
#ifdef MPI
  include 'mpif.h'
#endif

  ! arguments
  integer, intent(in) :: &
    nspin, &    ! number of spin channels
    nkpt, &     ! number of k-points where self-energy is computed
    sig_en, &   ! number of energy values where self-energy is computed
    dft_code    ! choice of DFT code
  ! real-space grid
  type(gspace), intent(inout) :: gvec
  ! k-points and wavefunctions, q-space in TDLDA
  type(kptinfo), intent(inout) :: kpt
  type(qptinfo), intent(inout) :: qpt
  type(kernelinfo), dimension(gvec%syms%ntrans, qpt%nk), intent(inout) :: &
    k_c, &        ! kernel for correlation, vertex
    k_p           ! kernel for TDLDA
  ! input self-energy data
  type(siginfo), intent(inout) :: sig_in
  ! self-energy data
  type(siginfo), dimension(nspin, nkpt), intent(inout) :: sig
  ! quasi-particle data
  type(qpinfo), dimension(gvec%syms%ntrans, nspin, nkpt), intent(inout) :: q_p

  logical, intent(in) :: &
    nolda, &      ! true if LDA kernel is not used
    tamm_d, &     ! true if Tamm-Dancof approximation is used
    writeqp, &    ! true if QP wavefunctions are printed in file parsec_qp.dat
    snorm, &      ! true if sum rule is renormalized
    cohsex        ! true if self-energy is computed within the COHSEX approximation
  ! abort flag, true if calculation aborted abnormally
  logical, intent(out) :: lstop

  real(dp), intent(in) :: &
    ecuts, &      ! resolution in energy denominators, in Ry
    sig_cut       ! cut-off in self-energy corrections
  ! maximum amplitude of self-energy correction
  real(dp), intent(out) :: max_sig
  ! Additional input parameters for ISDF method
  type(ISDF), intent(inout) :: isdf_in
  logical, intent(in) :: doisdf
  type(options), intent(in) :: opt
  ! local variables
  character(len=100) :: file_name

  logical :: staticcorr
  integer :: ii, jj, irp, jrp, iq, ik, jk, isp, isig, &
             info, chkpt, neig_qp, ien, n_intp_loc, ic, iv, icv, &
             icv_start, icv_end, intp_start, intp_end, ij, incr, &
             jn, m1, ncv, ncv_loc, iprocs, nval, inode, ipe, &
             ldncv, mycv_end, mycv_start, myn_intp_end, myn_intp_start, &
             myn_intp_r, myncv
  integer, parameter :: npoly = 6
  real(dp) :: tsec(2), xsum, rtmp, epsinv, deltae, emin, &
              emax, en0, pnorm2, res, fit_error
  real(dp), allocatable :: polynomial(:), Pvec(:), &
                           tmp_Cmtrx(:, :), tmp_Cvec(:), tmp_CvecM(:), tmp_poly(:), &
                           sqrtR(:), tmp_Pvec(:)
  integer, allocatable :: iord(:), cvpair(:, :)
  integer, parameter :: it_scf = 0, niter = 15
  real(dp), parameter :: qpmix = 1.d0
  complex(dp), allocatable :: zz(:), ezz(:), sigma_corr(:), &
                              sigma_corr_tmp(:)
  ! -------- temporary arrays for lanczos iterations --------
  real(dp) :: MC_vec(w_grp%myn_intp_r), CMC_vec(w_grp%myncv), &
              tmp_vec(isdf_in%n_intp_r), tmp_Hvec(w_grp%ldncv)
  integer :: tmp_cvpair(2, w_grp%ldncv)
  ! ---------------------------------------------------------
  real(dp), external :: ddot

  if (peinf%master) print *, "ecuts ", ecuts
  !-------------------------------------------------------------------
  ! Prepare to calculate self-energy.
  !
  staticcorr = .false.

  if (nspin /= 1) call die("For now, GW lanczos is only implemented for nspin = 1.")
  if (nkpt /= 1) call die("For now, GW lanczos is only implemented for nkpt = 1.")
  if (peinf%num /= 1) call die(" GW lanczos is only implemented for 1 peinf group.")

  do ik = 1, nkpt
    do isp = 1, nspin
      if (sig(isp, ik)%ndiag_s > 0) then
        sig(isp, ik)%xdiag = zzero
        sig(isp, ik)%scsdiag = zzero
      end if
      if (sig(isp, ik)%noffd_s > 0) then
        sig(isp, ik)%xoffd = zzero
        sig(isp, ik)%scsoffd = zzero
      end if
      if (sig_in%xc == XC_GW) then
        if (sig(isp, ik)%ndiag > 0) then
          sig(isp, ik)%scdiag = zzero
          sig(isp, ik)%sexdiag = zzero
          sig(isp, ik)%sgdiag = zzero
        end if
        if (sig(isp, ik)%ndiag_s > 0) sig(isp, ik)%sgsdiag = zzero
        if (sig(isp, ik)%noffd > 0) then
          sig(isp, ik)%scoffd = zzero
          sig(isp, ik)%sgoffd = zzero
        end if
        if (sig(isp, ik)%noffd_s > 0) sig(isp, ik)%sgsoffd = zzero
      end if
    end do
  end do

  !-------------------------------------------------------------------
  ! Calculate bare exchange part of self-energy.
  !
  if (chkpt < (qpt%nk + 1)*gvec%syms%ntrans) then
    call stopwatch(r_grp%master, ' Calling exchange ')
    do ik = 1, nkpt
      do isp = 1, nspin
        jk = sig(isp, ik)%indxk
        call timacc(6, 1, tsec)
        if (sig_in%xc == XC_GW .or. sig_in%xc == XC_HF .or. &
            sig_in%xc == XC_B3LYP) &
          call Zfock_exchange(gvec, kpt, sig(isp, ik), isp, jk)
        call timacc(6, 2, tsec)
      end do
    end do
  end if

  if (sig_in%xc == XC_GW) then
    inode = w_grp%inode
    mycv_start = w_grp%ncv_start(inode)
    mycv_end = w_grp%ncv_end(inode)
    myncv = w_grp%myncv
    ldncv = w_grp%ldncv
    myn_intp_start = w_grp%n_intp_start(inode)
    myn_intp_end = w_grp%n_intp_end(inode)
    myn_intp_r = w_grp%myn_intp_r

    allocate (zz(sig_in%nen))
    allocate (ezz(sig_in%nen + 1))
    allocate (sigma_corr_tmp(sig_in%nen + 1))
    allocate (sigma_corr(sig_in%nen))
    sigma_corr = 0.d0
    allocate (polynomial(npoly + 1))
    allocate (tmp_poly(npoly + 1))
    ! fit a polynomial
    nval = sum(kpt%wfn(1, 1)%occ0) ! only works for systems with a gap
    if (peinf%master) then
      emin = (kpt%wfn(1, 1)%e1(nval + 1) - &
              kpt%wfn(1, 1)%e1(nval))**2.0/1.25d0
      emax = (kpt%wfn(1, 1)%e1(isdf_in%maxicc) - &
              kpt%wfn(1, 1)%e1(1))**2.0*1.25d0
      print *, "emin = ", emin, " emax = ", emax
      call polyfit_sqrt(emin, emax, npoly, 20, peinf%inode, tmp_poly, fit_error, .true.)
    end if
    do ii = 1, npoly + 1
      polynomial(ii) = tmp_poly(npoly + 2 - ii)
    end do
    if (peinf%master) print *, "polynomial ", polynomial(1:(npoly + 1))
    call MPI_BCAST(polynomial, npoly + 1, MPI_DOUBLE, peinf%masterid, peinf%comm, ii)
    !
    !-------------------------------------------------------------------
    ! Calculate correlation and vertex. Must reset the file with
    ! polarizability eigenvectors.
    !
    ! Todo: currently, gw_lanczos only support qpt%nk = 1 and r_grp%num = 1
    ! Todo: gw_lanczos for vertex part
    ! Prepare C^\nu_{vc}
    ! k_p(1,1)%col(1,ij) --> valance band index
    ! k_p(1,1)%col(2,ij) --> conduction bands index
    ! determine the local (v,c) pairs
    !
    allocate (cvpair(2, myncv))
    cvpair(1:2, 1:myncv) = &
      k_p(1, 1)%col(1:2, mycv_start:mycv_end)
    ! local number of interpolation points
    allocate (Pvec(myncv))
    allocate (tmp_Pvec(ldncv))
    allocate (tmp_Cvec(isdf_in%n_intp_r))
    allocate (tmp_CvecM(myn_intp_r))
    allocate (sqrtR(myncv))
    do ij = mycv_start, mycv_end ! ij
      iv = k_p(1, 1)%col(1, ij)
      ic = k_p(1, 1)%col(2, ij)
      sqrtR(ij - mycv_start + 1) = (kpt%wfn(1, 1)%e1(ic) - kpt%wfn(1, 1)%e1(iv))**0.5
      !tmp_Cmtrx(1:isdf_in%n_intp_r, ij-icv_start+1) = &
      !  isdf_in%Psi_intp(1:isdf_in%n_intp_r, ic, 1, 1) * &
      !  isdf_in%Psi_intp(1:isdf_in%n_intp_r, iv, 1, 1)
    end do ! ij
    !print *, sqrtR(1:10)
    deltae = sig_in%deltae/(sig_in%nen - 1) ! in rydberg
    do ik = 1, nkpt
    do isp = 1, nspin
      do isig = 1, sig_in%ndiag
        m1 = sig_in%map(sig_in%diag(isig))
        en0 = kpt%wfn(isp, ik)%e1(m1) - sig_in%deltae*half
        do ien = 1, sig_in%nen
          zz(ien) = deltae*(ien - 1) + en0
        end do ! ien energy index
        do jn = 1, isdf_in%maxicc
          ! ----------------------------------------------------------------
          ! prepare vector |P_mn>
          ! m is the band which we want to compute its GW quasiparticle energy
          ! n is the band appear in the summation-over-band
          ! |P_mn> = \sum_{vc} (mn|vc) (e_c-e_v)^1/2 |vc>
          ! (mn|vc) (e_c-e_v)^1/2
          !  = \sum_{\mu} C^\mu_{mn} (\mu|\nu) C^\nu_{vc} (e_c-e_v)^1/2
          ! where:
          ! C^\mu_{mn} = Psi_intp(\mu,m) * Psi_intp(\mu,n)
          ! (\mu|\nu) = Mmtrx(:, :)
          ! C^\nu_{vc} = Psi_intp(\nu,v) * Psi_intp(\nu,c)
          ! perform lanczos iteration to find the spectra
          ! function

          ! prepare C^\mu_{mn}
          ! m1 is the index of states which GW energy is calculated
          ! jn is sum over bands

          call stopwatch(peinf%master, "prepare Pvec ")
          tmp_Cvec = 0.d0
          tmp_Cvec(myn_intp_start:myn_intp_end) = &
            isdf_in%ZPsi_intp_loc(1:myn_intp_r, m1, 1, 1)* &
            isdf_in%ZPsi_intp_loc(1:myn_intp_r, jn, 1, 1)
          if (w_grp%npes > 1) then
            call MPI_ALLREDUCE(MPI_IN_PLACE, tmp_Cvec, isdf_in%n_intp_r, &
                               MPI_DOUBLE, MPI_SUM, w_grp%comm, info)
          end if
          !if (w_grp%master) print *, "tmp_Cvec", tmp_Cvec(1:10)
          ! Compute tmp_CvecM(1:n_intp_loc)
          ! = tmp_Cvec(1, n_intp_r) @ Mmtrx(1:n_intp_r, intp_start:intp_end)
          ! or
          ! = Mmtrx(intp_start:intp_end, 1:n_intp_r) @ tmp_Cvec(n_intp_r)
          call Zgemv('N', myn_intp_r, isdf_in%n_intp_r, 1.d0, &
                     isdf_in%ZMmtrx_loc(1, 1, 1, 1, 1, 1, 1), myn_intp_r, &
                     tmp_Cvec, 1, 0.d0, tmp_CvecM, 1)
         !!tmp_Cvec = 0.d0
         !!tmp_Cvec(myn_intp_start:myn_intp_end) = tmp_CvecM(1:myn_intp_r)
         !!call MPI_ALLREDUCE(MPI_IN_PLACE, tmp_Cvec, isdf_in%n_intp_r,&
         !!  MPI_DOUBLE, MPI_SUM, w_grp%comm, info)
          !if (w_grp%master) print *, "tmp_CvecM", tmp_CvecM(1:10)
          ! Pvec stores the icv_start to icv_end elements of the global_Pvec
          ! compute Pvec(1:ncv_loc) = tmp_Cvec(1:isdf_in%n_intp_r)*tmp_Cmtrx(1:isdf_in%n_intp_r, 1:ncv_loc)
          Pvec = 0.d0 ! initialize Pvec with zeros
          ! call dgemv('T', isdf_in%n_intp_r, ncv_loc, 1.d0, tmp_Cmtrx, isdf_in%n_intp_r, tmp_Cvec, 1, 0.d0, Pvec, 1)
          do ipe = 0, w_grp%npes - 1
            tmp_Pvec = 0.d0
            do ij = w_grp%ncv_start(ipe), w_grp%ncv_end(ipe)
              ic = k_p(1, 1)%col(1, ij)
              iv = k_p(1, 1)%col(2, ij)
              tmp_Cvec(1:myn_intp_r) = tmp_CvecM(1:myn_intp_r)* &
                                       isdf_in%ZPsi_intp_loc(1:myn_intp_r, iv, 1, 1)
              tmp_Pvec(ij - w_grp%ncv_start(ipe) + 1) = &
                ddot(myn_intp_r, isdf_in%ZPsi_intp_loc(1, ic, 1, 1), 1, tmp_Cvec(1), 1)
            end do ! ij
            !print *, iv, ic
            !print *, tmp_Cvec(1:5)
            !print *, isdf_in%ZPsi_intp_loc(1, ic, 1, 1)
            !if ( w_grp%master) print *, "iband", jn, tmp_Pvec(1:5)
            if (w_grp%npes > 1) then
              call MPI_REDUCE(tmp_Pvec(1), Pvec(1), w_grp%ncv_end(ipe) - w_grp%ncv_start(ipe) + 1, &
                              MPI_DOUBLE, MPI_SUM, ipe, w_grp%comm, info)
            else
              Pvec(1:myncv) = tmp_Pvec(1:myncv)
            end if
          end do ! ipe loop
          !if (w_grp%master) print *, "sqrtR ", sqrtR(1:5)
          if (w_grp%master) print *, "iband ", jn, Pvec(1:5)
          Pvec(1:myncv) = Pvec(1:myncv)*sqrtR(1:myncv)
          pnorm2 = ddot(myncv, Pvec, 1, Pvec, 1)
          call MPI_ALLREDUCE(MPI_IN_PLACE, pnorm2, 1, MPI_DOUBLE, &
                             MPI_SUM, w_grp%comm, info)
          call stopwatch(peinf%master, "Finished Pvec ")
          !if (w_grp%master) print *, "pnorm**2 ", pnorm2
          !stop
          if (jn <= nval) then ! occupied states
            ezz(1:sig_in%nen) = &
              -(zz(1:sig_in%nen) - kpt%wfn(isp, ik)%e1(jn)) &
              + cmplx(0.d0, 1.d0)*ecuts
            ezz(sig_in%nen + 1) = cmplx(0.d0, 0.d0)
            ! call lanczos_spectra to compute <Pvec| 1/(ezz-H_aux) |Pvec>
            call lanczos_spectra_isdf_UltraLowMem(Pvec, sqrt(pnorm2), myncv, ezz, sig_in%nen + 1, niter, isdf_in, &
                                                  kpt%wfn(isp, ik), cvpair, sqrtR, polynomial, npoly, sigma_corr_tmp, &
                                                  MC_vec, CMC_vec, tmp_vec, tmp_Hvec, tmp_cvpair)
            sigma_corr(1:sig_in%nen) = sigma_corr(1:sig_in%nen) + 2.0*pnorm2/(-ezz(1:sig_in%nen))* &
                                       (-sigma_corr_tmp(sig_in%nen + 1) + sigma_corr_tmp(1:sig_in%nen))
#ifdef DEBUG
            if (peinf%master) print *, jn, "incr ", 2.0*pnorm2/(-ezz(2))* &
              (-sigma_corr_tmp(sig_in%nen + 1) + sigma_corr_tmp(2))
#endif
            ! stop
          else ! for unoccupied states
            ezz(1:sig_in%nen) = &
              (zz(1:sig_in%nen) - kpt%wfn(isp, ik)%e1(jn)) &
              + cmplx(0.d0, 1.d0)*ecuts
            ezz(sig_in%nen + 1) = cmplx(0.d0, 0.d0)
            ! call lanczos_spectra to compute <Pvec| 1/(ezz-H_aux) |Pvec>
            call lanczos_spectra_isdf_UltraLowMem(Pvec, sqrt(pnorm2), myncv, ezz, sig_in%nen + 1, &
                                                  niter, isdf_in, kpt%wfn(isp, ik), cvpair, sqrtR, &
                                                  polynomial, npoly, sigma_corr_tmp, MC_vec, CMC_vec, &
                                                  tmp_vec, tmp_Hvec, tmp_cvpair)
            sigma_corr(1:sig_in%nen) = sigma_corr(1:sig_in%nen) + 2.0*pnorm2/ezz(1:sig_in%nen)* &
                                       (-sigma_corr_tmp(sig_in%nen + 1) + sigma_corr_tmp(1:sig_in%nen))
#ifdef DEBUG
            if (peinf%master) print *, jn, "incr ", 2.0*pnorm2/ezz(2)* &
              (-sigma_corr_tmp(sig_in%nen + 1) + sigma_corr_tmp(2))
#endif
          end if
          if (mod(jn, 5) == 0) then
            call stopwatch(peinf%master, ' summation over bands ')
          end if
          !
        end do ! jn
        if (peinf%master) then
          print *, "sigma_corr", sig_in%map(sig_in%diag(isig))
          do ien = 1, sig_in%nen
            write (6, *) ien, ryd*(deltae*(ien - 1) + en0), real(sigma_corr(ien))
          end do
        end if ! peinf%master
        do ien = 1, sig_in%nen
          sig(isp, ik)%scdiag(ien, isig) = real(sigma_corr(ien))
          sig(isp, ik)%scdiag(ien, sig_in%ndiag + isig) = aimag(sigma_corr(ien))
        end do
        ! sig(isp,ik)%scdiag
      end do ! isig sigma
    end do ! isp (spin) loop
    end do ! ik (kpoint) loop
    deallocate (zz, ezz)
    deallocate (Pvec)
    ! deallocate (tmp_Cmtrx)
    deallocate (tmp_Cvec)
    deallocate (tmp_CvecM)
    deallocate (sqrtR)
  else ! xc != GW
    print *, "lanczos method only support GW."
    call die("lanczos method only support GW. You asked for other xc type in the input file.")
  end if ! xc

23 continue

  call stopwatch(r_grp%master, &
                 ' All matrix elements calculated. Start printout')

  if (peinf%master .and. sig_in%xc == XC_GW) then
    open (12, file='hmat_qp_nostatic', form='formatted')
  end if

  max_sig = mone

  !-------------------------------------------------------------------
  ! From now on, unit of energy is eV.
  !
  do ik = 1, nkpt
    do isp = 1, nspin
      jk = sig(isp, ik)%indxk
      if (sig(isp, ik)%ndiag_s > 0) then
        sig(isp, ik)%vxcdiag = sig(isp, ik)%vxcdiag*ryd
        sig(isp, ik)%xdiag = sig(isp, ik)%xdiag*ryd
        sig(isp, ik)%scsdiag = sig(isp, ik)%scsdiag*ryd
      end if
      if (sig(isp, ik)%noffd_s > 0) then
        sig(isp, ik)%vxcoffd = sig(isp, ik)%vxcoffd*ryd
        sig(isp, ik)%xoffd = sig(isp, ik)%xoffd*ryd
        sig(isp, ik)%scsoffd = sig(isp, ik)%scsoffd*ryd
      end if
      if (sig_in%xc == XC_GW) then
        if (sig(isp, ik)%ndiag_s > 0) &
          sig(isp, ik)%sgsdiag = sig(isp, ik)%sgsdiag*ryd
        if (sig(isp, ik)%noffd_s > 0) &
          sig(isp, ik)%sgsoffd = sig(isp, ik)%sgsoffd*ryd
        if (sig(isp, ik)%ndiag > 0) then
          sig(isp, ik)%scdiag = sig(isp, ik)%scdiag*ryd
          sig(isp, ik)%sexdiag = sig(isp, ik)%sexdiag*ryd
          sig(isp, ik)%sgdiag = sig(isp, ik)%sgdiag*ryd
        end if
        if (sig(isp, ik)%noffd > 0) then
          sig(isp, ik)%scoffd = sig(isp, ik)%scoffd*ryd
          sig(isp, ik)%sgoffd = sig(isp, ik)%sgoffd*ryd
        end if
      end if

      !-------------------------------------------------------------------
      ! Sort quasiparticle orbitals according to representation.
      !
      allocate (iord(sig(isp, ik)%nmap))
      iord = 0
      do irp = 1, gvec%syms%ntrans
        jj = 0
        do isig = 1, sig(isp, ik)%nmap
          ii = sig(isp, ik)%map(isig)
          if (kpt%wfn(isp, jk)%irep(ii) == irp) then
            jj = jj + 1
            iord(isig) = jj
          end if
        end do
        neig_qp = jj
        q_p(irp, isp, ik)%neig = neig_qp
        if (neig_qp > 0) then
          allocate (q_p(irp, isp, ik)%jrep(neig_qp))
          q_p(irp, isp, ik)%jrep = 0
          allocate (q_p(irp, isp, ik)%hqp(neig_qp, neig_qp))
          q_p(irp, isp, ik)%hqp = zzero
          allocate (q_p(irp, isp, ik)%sigmaqp(neig_qp, neig_qp))
          q_p(irp, isp, ik)%sigmaqp = zzero
          allocate (q_p(irp, isp, ik)%sigmai(neig_qp))
          q_p(irp, isp, ik)%sigmai = ecuts*ryd
          allocate (q_p(irp, isp, ik)%eqp(neig_qp))
          q_p(irp, isp, ik)%eqp = zero
          allocate (q_p(irp, isp, ik)%vqp(neig_qp, neig_qp))
          q_p(irp, isp, ik)%vqp = zzero
          jj = 0
          do isig = 1, sig(isp, ik)%nmap
            ii = sig(isp, ik)%map(isig)
            if (kpt%wfn(isp, jk)%irep(ii) == irp) then
              jj = jj + 1
              q_p(irp, isp, ik)%jrep(jj) = ii
              q_p(irp, isp, ik)%hqp(jj, jj) = zone*kpt%wfn(isp, jk)%e1(ii)*ryd
            end if
          end do
        end if
      end do
      !-------------------------------------------------------------------
      ! Print self-energy corrections.
      !
      if (gvec%per > 0) then
        if (nspin == 1) then
          write (file_name, '(a,i3.3,a,i4.4)') 'sigma_nostatic_', ik, '_', it_scf
        else
          if (isp == 1) then
            write (file_name, '(a,i3.3,a,i4.4)') 'sigma_nostatic_up_', ik, '_', it_scf
          else
            write (file_name, '(a,i3.3,a,i4.4)') 'sigma_nostatic_down_', ik, '_', it_scf
          end if
        end if
      else
        if (nspin == 1) then
          write (file_name, '(a,i3.3,a,i4.4)') 'sigma_nostatic_', ik, '_', it_scf
        else
          if (isp == 1) then
            write (file_name, '(a,i3.3,a,i4.4)') 'sigma_nostatic_up_', ik, '_', it_scf
          else
            write (file_name, '(a,i3.3,a,i4.4)') 'sigma_nostatic_down_', ik, '_', it_scf
          end if
        end if
      end if
      !
      ! Print self-energy tables without static correction.
      !
      call printsigma(gvec%syms%ntrans, sig_in, sig(isp, ik), &
                      kpt%wfn(isp, jk), q_p(1:gvec%syms%ntrans, isp, ik), 12, &
                      isp, ik, iord, qpmix, rtmp, file_name)

      deallocate (iord)
    end do
  end do

  if (peinf%master .and. sig_in%xc == XC_GW) then
    close (12)
  end if
#ifdef MPI
  call MPI_BCAST(max_sig, 1, MPI_DOUBLE_PRECISION, &
                 peinf%masterid, peinf%comm, info)
#endif

  !-------------------------------------------------------------------
  ! Calculate total energy.
  !
  ! call Zetotal(gvec,kpt,nspin)

  if (writeqp .and. sig_in%xc == XC_GW .and. dft_code == PARSEC) &
    call Zprint_qp(nspin, gvec%syms%ntrans, 66, 77, gvec, kpt)

end subroutine Zcalculate_sigma_lanczos_UltraLowMem
!===================================================================
